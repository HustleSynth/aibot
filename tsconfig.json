// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "commonjs",
    "lib": ["ES2022"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "node",
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

// .env.example
# Discord Configuration
DISCORD_BOT_TOKEN=your_bot_token_here
DISCORD_CLIENT_ID=your_client_id_here
ADMIN_IDS=comma,separated,admin,ids

# Database Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_anon_key_here
MONGODB_URI=mongodb://localhost:27017/discord-bot

# AI Provider API Keys (Free Tier)
HUGGINGFACE_API_KEY=
COHERE_API_KEY=
DEEPAI_API_KEY=
STABILITY_API_KEY=
REPLICATE_API_KEY=
ASSEMBLYAI_API_KEY=
ELEVENLABS_API_KEY=
GROQ_API_KEY=
GOOGLE_AI_API_KEY=
MISTRAL_API_KEY=
OPENROUTER_API_KEY=

# Logging
LOG_LEVEL=info

// Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Create logs directory
RUN mkdir -p logs

# Run as non-root user
USER node

# Start the bot
CMD ["npm", "start"]

// docker-compose.yml
version: '3.8'

services:
  bot:
    build: .
    env_file: .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    depends_on:
      - mongodb

  mongodb:
    image: mongo:7
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "27017:27017"

volumes:
  mongodb_data:

// .dockerignore
node_modules
dist
.env
logs
*.log
.git
.gitignore
README.md
.eslintrc.json

// bot.sh (Linux/macOS startup script)
#!/bin/bash

# Discord Bot Startup Script

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Check if .env file exists
if [ ! -f .env ]; then
    print_message $RED "Error: .env file not found!"
    print_message $YELLOW "Please copy .env.example to .env and configure it."
    exit 1
fi

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    print_message $YELLOW "Installing dependencies..."
    npm install
fi

# Build TypeScript
print_message $GREEN "Building TypeScript..."
npm run build

# Start the bot
case "$1" in
    start)
        print_message $GREEN "Starting Discord bot..."
        npm start
        ;;
    dev)
        print_message $GREEN "Starting Discord bot in development mode..."
        npm run dev
        ;;
    pm2)
        print_message $GREEN "Starting Discord bot with PM2..."
        npm run start:prod
        ;;
    docker)
        print_message $GREEN "Starting Discord bot with Docker..."
        docker-compose up -d
        ;;
    *)
        print_message $YELLOW "Usage: $0 {start|dev|pm2|docker}"
        exit 1
esac

// bot.ps1 (Windows PowerShell startup script)
# Discord Bot Startup Script for Windows

param(
    [Parameter(Position=0)]
    [string]$Command = "start"
)

# Function to print colored output
function Write-ColorOutput($ForegroundColor, $Message) {
    Write-Host $Message -ForegroundColor $ForegroundColor
}

# Check if .env file exists
if (-not (Test-Path ".env")) {
    Write-ColorOutput Red "Error: .env file not found!"
    Write-ColorOutput Yellow "Please copy .env.example to .env and configure it."
    exit 1
}

# Check if node_modules exists
if (-not (Test-Path "node_modules")) {
    Write-ColorOutput Yellow "Installing dependencies..."
    npm install
}

# Build TypeScript
Write-ColorOutput Green "Building TypeScript..."
npm run build

# Start the bot based on command
switch ($Command) {
    "start" {
        Write-ColorOutput Green "Starting Discord bot..."
        npm start
    }
    "dev" {
        Write-ColorOutput Green "Starting Discord bot in development mode..."
        npm run dev
    }
    "pm2" {
        Write-ColorOutput Green "Starting Discord bot with PM2..."
        npm run start:prod
    }
    "docker" {
        Write-ColorOutput Green "Starting Discord bot with Docker..."
        docker-compose up -d
    }
    default {
        Write-ColorOutput Yellow "Usage: .\bot.ps1 [start|dev|pm2|docker]"
        exit 1
    }
}